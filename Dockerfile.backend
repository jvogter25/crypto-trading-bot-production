# =====================================================
# CRYPTO TRADING BOT - BACKEND DOCKERFILE
# =====================================================
# Multi-stage build for optimized production deployment
# Includes all dependencies, health checks, and monitoring

# =====================================================
# STAGE 1: Dependencies Installation
# =====================================================
FROM node:18-alpine AS dependencies

# Set working directory
WORKDIR /app

# Install system dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    postgresql-client \
    curl \
    && ln -sf python3 /usr/bin/python

# Copy package files
COPY crypto-trading-backend/package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production && npm cache clean --force

# =====================================================
# STAGE 2: Build Stage
# =====================================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY crypto-trading-backend/package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY crypto-trading-backend/ .

# Build the application
RUN npm run build

# =====================================================
# STAGE 3: Production Runtime
# =====================================================
FROM node:18-alpine AS production

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV TZ=UTC

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Install runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy production dependencies from dependencies stage
COPY --from=dependencies --chown=nestjs:nodejs /app/node_modules ./node_modules

# Copy built application from builder stage
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./

# Copy additional required files
COPY --from=builder --chown=nestjs:nodejs /app/google-credentials.json ./
COPY --from=builder --chown=nestjs:nodejs /app/database ./database/
COPY --from=builder --chown=nestjs:nodejs /app/scripts ./scripts/

# Create logs directory
RUN mkdir -p /app/logs && chown -R nestjs:nodejs /app/logs

# Create health check script
RUN echo '#!/bin/sh\ncurl -f http://localhost:$PORT/health || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh && \
    chown nestjs:nodejs /app/healthcheck.sh

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]

# =====================================================
# LABELS FOR METADATA
# =====================================================
LABEL maintainer="Crypto Trading Bot Team"
LABEL version="1.0.0"
LABEL description="NestJS Backend for Crypto Trading Bot with Live Trading Capabilities"
LABEL org.opencontainers.image.source="https://github.com/your-repo/crypto-trading-bot" 